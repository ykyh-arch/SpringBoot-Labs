package cn.iocoder.springboot.lab82.demo;

/**
 * SOLID原则
 *
 * 1、单一职责原则（SRP）
 * 一个类只负责完成一个职责或者功能，不要存在多于一种导致类变更的原因。
 * 单一职责原则通过避免设计大而全的类，避免将不相关的功能耦合在一起，来提高类的内聚性。同时，类职责单一，类依赖的和被依赖的其他类也会变少，减少了代码的耦合性，以此来实现代码的高内聚、松耦合。但是，如果拆分得过细，实际上会适得其反，反倒会降低内聚性，也会影响代码的可维护性。
 *
 * 2、开放-关闭原则（OCP）
 * 添加一个新的功能，应该是通过在已有代码基础上扩展代码（新增模块、类、方法、属性等），而非修改已有代码（修改模块、类、方法、属性等）的方式来完成。
 * 开闭原则并不是说完全杜绝修改，而是以最小的修改代码的代价来完成新功能的开发。
 *
 * 3、里氏替换原则（LSP）
 * 子类对象（object of subtype/derived class）能够替换程序（program）中父类对象（object of base/parent class）出现的任何地方，并且保证原来程序的逻辑行为（behavior）不变及正确性不被破坏。
 * 子类可以扩展父类的功能，但不能改变父类原有的功能
 *
 * 4、接口隔离原则（ISP）
 * 调用方不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。接口隔离原则提供了一种判断接口的职责是否单一的标准：通过调用者如何使用接口来间接地判定。如果调用者只使用部分接口或接口的部分功能，那接口的设计就不够职责单一。
 *
 * 5、依赖反转原则（DIP）
 * 高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象
 *
 * 6、迪米特法则
 * 一个对象应该对其他对象保持最少的了解，为了低耦合
 *
 * 7、合成复用原则
 * 尽量使用合成/聚合的方式，而不是使用继承。
 *
 * 单一职责原则告诉我们实现类要职责单一；里氏替换原则告诉我们不要破坏继承体系；依赖倒置原则告诉我们要面向接口编程；接口隔离原则告诉我们在设计接口的时候要精简单一；迪米特法则告诉我们要降低耦合。而开闭原则是总纲，告诉我们要对扩展开放，对修改关闭。
 *
 *
 * 设计模式
 *
 * 创建型：主要解决对象的创建问题，封装复杂的创建过程，解耦对象的创建代码和使用代码
 *
 * 结构型：主要通过类或对象的不同组合，解耦不同功能的耦合
 *
 * 行为型：主要解决的是类或对象之间的交互行为的耦合
 *
 * 单例模式演示示例
 */
public class DemoApplication {

}
