<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <!--项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的-->
        <artifactId>labs-parent</artifactId>
        <!-- 定义当前构件所属的组，通常与域名反向一一对应 -->
        <groupId>cn.iocoder.springboot.labs</groupId>
        <!-- 版本号，区分为：snapshots快照版本和releases稳定版 -->
        <version>1.0-SNAPSHOT</version>
    </parent>
<!--    POM 中可以指定以下配置：-->
<!--    项目依赖-->
<!--    插件-->
<!--    执行目标-->
<!--    项目构件 profile，重点-->
<!--    项目版本-->
<!--    项目开发者列表-->
<!--    相关邮件列表信息-->
    <!-- 模型版本，POM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元 -->
    <modelVersion>4.0.0</modelVersion>
    <artifactId>lab-12-mybatis</artifactId>
    <!--构件的打包方式，默认：jar，可选jar、war、ear、pom、maven-plugin-->
    <packaging>pom</packaging>
    <modules>
        <module>lab-12-mybatis-xml</module>
        <module>lab-12-mybatis-annotation</module>
        <module>lab-12-mybatis-plus</module>
        <module>lab-12-mybatis-tk</module>
        <module>lab-12-mybatis-plus-gui</module>
        <module>lab-12-spring-mybatis</module>
    </modules>

    <!--私服搭建参考：https://cloud.tencent.com/developer/article/2105636-->
    <!--配置远程仓库地址，方式一-->
    <repositories>
        <repository>
            <!--这里可以使用私服，若nexus私服需要有用户名和密码登录才能访问，需要在~/.m2/settings.xml添加如下配置-->
            <!--<server>
                <id>maven-nexus</id>
                <username>admin</username>
                <password>nexus@123</password>
            </server>-->
            <id>maven-nexus</id>
            <url>http://192.168.177.1:8081/repository/maven-public/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>aliyun-releases</id>
            <url>https://maven.aliyun.com/repository/public</url>
            <releases>
                <!--是否需要从这个远程仓库下载稳定版本构建-->
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <!--是否需要从这个远程仓库下载快照版本构建-->
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>
    <!--配置远程仓库地址，方式二：镜像方式，在~/.m2/settings.xml中配置，或者在M2_HOME/conf/settings.xml中，以下配置参考-->
    <!--<mirrors>-->
        <!--<mirror>
            <id>mirror-aliyun-releases</id>
            <mirrorOf>*</mirrorOf>
            <name>阿里云maven镜像</name>
            <url>https://maven.aliyun.com/repository/public</url>
        </mirror>-->
        <!--若需要有用户名和密码登录才能访问，需要在~/.m2/settings.xml添加如下配置-->
        <!--<server>
            <id>mirror-nexus</id>
            <username>admin</username>
            <password>nexus@123</password>
        </server>-->
        <!--<mirror>
            <id>mirror-nexus</id>
            <mirrorOf>*</mirrorOf>
            <name>nexus镜像</name>
            <url>http://192.168.177.1:8081/repository/maven-public/</url>
        </mirror>-->
    <!--</mirrors>-->

    <!--分发管理，将本地的构件发布到私服执行`mvn deploy`，若需要账户密码，需要在~/.m2/settings.xml添加如下配置-->
    <!--<server>
        <id>release-nexus</id>
        <username>admin</username>
        <password>nexus@123</password>
    </server>-->
    <!--<server>
        <id>snapshot-nexus</id>
        <username>admin</username>
        <password>nexus@123</password>
    </server>-->
    <distributionManagement>
        <repository>
            <id>release-nexus</id>
            <url>http://192.168.177.1:8081/repository/maven-releases/</url>
            <name>nexus私服中宿主仓库->存放/下载稳定版本的构件</name>
        </repository>
        <snapshotRepository>
            <id>snapshot-nexus</id>
            <url>http://192.168.177.1:8081/repository/maven-snapshots/</url>
            <name>nexus私服中宿主仓库->存放/下载快照版本的构件</name>
        </snapshotRepository>
    </distributionManagement>

    <!--maven 生命周期，分为3种：clean、default、site，各生命周期相互独立，互不影响；同生命周期内各阶段有先后顺序，后阶段执行依赖前一阶段
        执行mvn 生命周期阶段名称，如：mvn clean
        详细内容参考：https://mp.weixin.qq.com/s?__biz=MzA5MTkxMDQ4MQ==&mid=2648933601&idx=1&sn=b3263c2c02029521609abc248c5d3233&chksm=88621cdfbf1595c91ee4d5067ddbb2cbde5ef6ed78ef0c68d0e058c685626300ec64bf4366ae&token=1776250768&lang=zh_CN#rd
    -->

    <!--maven插件仓库-->
    <pluginRepositories>
        <pluginRepository>
            <id>plugin-repository</id>
            <url>http://repo1.maven.org/maven2/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
        </pluginRepository>
    </pluginRepositories>

</project>
