<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>cn.iocoder.springboot.labs</groupId>
        <artifactId>lab-12-mybatis</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>lab-12-spring-mybatis</artifactId>
    <packaging>pom</packaging>

    <modules>
        <module>chat01</module>
        <module>chat02</module>
        <module>chat03</module>
        <module>chat04</module>
        <module>chat05</module>
        <module>chat06</module>
        <module>chat07</module>
    </modules>

    <!--自定义一些用户属性-->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- 配置maven编译的时候采用的编译器版本 -->
        <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>
        <!-- 指定源代码是什么版本的，如果源码和这个版本不符将报错，maven中执行编译的时候会用到这个配置，默认是1.5，这个相当于javac命令后面的-source参数 -->
        <maven.compiler.source>1.8</maven.compiler.source>
        <!-- 该命令用于指定生成的class文件将保证和哪个版本的虚拟机进行兼容，maven中执行编译的时候会用到这个配置，默认是1.5，这个相当于javac命令后面的-target参数 -->
        <maven.compiler.target>1.8</maven.compiler.target>
        <mybatis.version>3.5.3</mybatis.version>
        <mysql.version>5.1.47</mysql.version>
        <!--<lombok.version>RELEASE</lombok.version>-->
        <lombok.version>1.18.22</lombok.version>
    </properties>

    <!--项目采用maven中聚合及继承的方式来管理-->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis</artifactId>
                <version>${mybatis.version}</version>
                <!--依赖的类型，对应构建中packaging-->
                <!--<type>pom</type>-->
                <!--scope依赖范围：
                    classpath分：1编译源码、2编译测试代码、3运行测试代码、4运行项目
                    具体有以下几种：
                    compile：编译依赖范围，1234classpath都有效，默认，如：spring-web
                    test：测试依赖范围，23classpath有效，14无效，如：junit
                    provide：已提供依赖范围，123classpath有效，4无效，如：servlet-api
                    runtime：运行时依赖范围，234classpath都有效，1效，如：jdbc
                    system：系统依赖范围，与provide一致的，需要指定systemPath元素
                    scope范围会对依赖传递产生影响，具体参考：https://mp.weixin.qq.com/s?__biz=MzA5MTkxMDQ4MQ==&mid=2648933527&idx=1&sn=b09b1d6bd7a893224ad53282f15b962e&chksm=88621ca9bf1595bfb7034a5fc201f36ea24b7d80aa77d89505976c3bc52787b71cf4e28fb711&token=1919005508&lang=zh_CN#rd
                -->
                <!--<scope>compile</scope>-->
                <!--maven依赖调解功能，2个原则：路径最近原则、最先声明原则-->
                <!--可选依赖，当A->B中scope:compile、B->C中scope:compile时，则依据依赖传递性，C会传递给A，被A依赖，若B不想让C被A自动依赖，则通过optional设置为true-->
                <!--<optional>true</optional>-->
                <!--排除依赖传递，可用于版本升级-->
                <!--<exclusions>
                    <exclusion></exclusion>
                    <exclusion></exclusion>
                </exclusions>-->
            </dependency>
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
            </dependency>
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.12</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>1.2.3</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

</project>