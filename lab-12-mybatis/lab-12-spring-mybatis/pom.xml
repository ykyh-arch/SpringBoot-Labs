<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!--maven继承，parent从父构件继承了依赖-->
    <parent>
        <groupId>cn.iocoder.springboot.labs</groupId>
        <artifactId>lab-12-mybatis</artifactId>
        <version>1.0-SNAPSHOT</version>
        <!--默认是../pom.xml，当前文件上级目录找pom.xml-->
        <!--<relativePath>../pom.xml</relativePath>-->
    </parent>

    <!--groupId、version都没有，是因为继承了父pom.xml内容-->
    <artifactId>lab-12-spring-mybatis</artifactId>
    <packaging>pom</packaging>

    <!--以下元素都可以从父元素中继承-->
<!--    groupId：项目组ID，项目坐标的核心元素-->
<!--    version：项目版本，项目坐标的核心元素-->
<!--    description：项目的描述信息-->
<!--    organization：项目的组织信息-->
<!--    inceptionYear：项目的创始年份-->
<!--    url：项目的url地址-->
<!--    developers：项目的开发者信息-->
<!--    contributors：项目的贡献者信息-->
<!--    distributionManagement：项目的部署配置信息-->
<!--    issueManagement：项目的缺陷跟踪系统信息-->
<!--    ciManagement：项目的持续集成系统信息-->
<!--    scm：项目的版本控制系统信息-->
<!--    mailingLists：项目的邮件列表信息-->
<!--    properties：自定义的maven属性配置信息-->
<!--    dependencyManagement：项目的依赖管理配置-->
<!--    repositories：项目的仓库配置-->
<!--    build：包括项目的源码目录配置、输出目录配置、插件管理配置等信息-->
<!--    reporting：包括项目的报告输出目录配置、报告插件配置等信息-->

    <!--maven聚合，在父构件执行mvn指令，同步执行到子构件-->
    <modules>
        <!--被聚合的模块pom.xml所在的目录路径，可以相对路径，也可以绝对路径，以chat01演示-->
        <module>chat01</module>
        <module>chat02</module>
        <module>chat03</module>
        <module>chat04</module>
        <module>chat05</module>
        <!--chat06补充演示多环境构建过程-->
        <module>chat06</module>
        <!--chat07补充演示资源文件打包过程-->
        <module>chat07</module>
    </modules>

    <!--自定义一些用户属性-->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- 配置maven编译的时候采用的编译器版本 -->
        <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>
        <!-- 指定源代码是什么版本的，如果源码和这个版本不符将报错，maven中执行编译的时候会用到这个配置，默认是1.5，这个相当于javac命令后面的-source参数 -->
        <maven.compiler.source>1.8</maven.compiler.source>
        <!-- 该命令用于指定生成的class文件将保证和哪个版本的虚拟机进行兼容，maven中执行编译的时候会用到这个配置，默认是1.5，这个相当于javac命令后面的-target参数 -->
        <maven.compiler.target>1.8</maven.compiler.target>
        <!--跳过单元测试-->
        <maven.test.skip>true</maven.test.skip>
        <mybatis.version>3.5.3</mybatis.version>
        <mysql.version>5.1.47</mysql.version>
        <!--<lombok.version>RELEASE</lombok.version>-->
        <lombok.version>1.18.22</lombok.version>
        <!--支持属性，包括：内置属性、pom属性、settings属性、java系统属性、环境变量属性-->
        <!--pom属性-->
        <!-- 项目的主源码目录，默认为src/main/java/ -->
        <a>${pom.build.sourceDirectory}</a>
        <!-- 项目的测试源码目录，默认为src/test/java/ -->
        <b>${project.build.testSourceDirectory}</b>
        <!-- 项目构建输出目录，默认为target/ -->
        <c>${project.build.directory}</c>
        <!-- 项目主代码编译输出目录，默认为target/classes -->
        <d>${project.build.outputDirectory}</d>
        <!-- 项目测试代码编译输出目录，默认为target/test-classes -->
        <e>${project.build.testOutputDirectory}</e>
        <!-- 项目的groupId -->
        <f>${project.groupId}</f>
        <!-- 项目的artifactId -->
        <g>${project.artifactId}</g>
        <!-- 项目的version，与${version}等价-->
        <h>${project.version}</h>
        <!-- 项目打包输出文件的名称，默认为${project.artifactId}-${project.version} -->
        <i>${project.build.finalName}</i>
        <!-- setting属性 -->
        <!-- 获取本地仓库地址-->
        <a1>${settings.localRepository}</a1>
        <!-- 系统属性 -->
        <!-- 用户目录 -->
        <a2>${user.home}</a2>
        <!-- 环境变量属性，获取环境变量JAVA_HOME的值 -->
        <a3>${env.JAVA_HOME}</a3>
    </properties>

    <!--项目采用maven中聚合及继承的方式来管理-->
    <!--申明了依赖管理，当前模块没有真正依赖，可以通过mvn dependency:tree查看依赖关系-->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis</artifactId>
                <version>${mybatis.version}</version>
                <!--依赖的类型，对应构建中packaging-->
                <!--<type>pom</type>-->
                <!--scope依赖范围：
                    classpath分：1编译源码、2编译测试代码、3运行测试代码、4运行项目
                    具体有以下几种：
                    compile：编译依赖范围，1234classpath都有效，默认，如：spring-web
                    test：测试依赖范围，23classpath有效，14无效，如：junit
                    provide：已提供依赖范围，123classpath有效，4无效，如：servlet-api
                    runtime：运行时依赖范围，234classpath都有效，1效，如：jdbc
                    system：系统依赖范围，与provide一致的，需要指定systemPath元素
                    scope范围会对依赖传递产生影响，具体参考：https://mp.weixin.qq.com/s?__biz=MzA5MTkxMDQ4MQ==&mid=2648933527&idx=1&sn=b09b1d6bd7a893224ad53282f15b962e&chksm=88621ca9bf1595bfb7034a5fc201f36ea24b7d80aa77d89505976c3bc52787b71cf4e28fb711&token=1919005508&lang=zh_CN#rd
                -->
                <!--<scope>compile</scope>-->
                <!--maven依赖调解功能，2个原则：路径最近原则、最先声明原则-->
                <!--可选依赖，当A->B中scope:compile、B->C中scope:compile时，则依据依赖传递性，C会传递给A，被A依赖，若B不想让C被A自动依赖，则通过optional设置为true-->
                <!--<optional>true</optional>-->
                <!--排除依赖传递，可用于版本升级-->
                <!--<exclusions>
                    <exclusion></exclusion>
                    <exclusion></exclusion>
                </exclusions>-->
            </dependency>
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
            </dependency>
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.12</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>1.2.3</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <!--插件管理，在父构件中申明-->
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>3.2.1</version>
                    <executions>
                        <execution>
                            <id>attach-source</id>
                            <!--绑定default生命周期-->
                            <phase>verify</phase>
                            <goals>
                                <goal>jar-no-fork</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

</project>