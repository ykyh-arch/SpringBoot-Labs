<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.2.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>lab-72-docker-demo-1</artifactId>

    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <!--仓库地址-->
        <docker.repostory>192.168.177.1:80</docker.repostory>
        <!--仓库名称-->
        <docker.image.prefix>lab-72-docker</docker.image.prefix>
        <!--镜像Tag-->
        <docker.image.tag>latest</docker.image.tag>
        <!--docker.maven.version，1.0.0-->
        <docker.maven.plugin.version>1.2.2</docker.maven.plugin.version>
        <dockerfile.maven.plugin.version> 1.4.13</dockerfile.maven.plugin.version>
    </properties>

    <dependencies>
        <!-- 实现对 SpringMVC 的自动化配置 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- 实现对 Actuator 的自动化配置 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
    </dependencies>

    <build>
        <!-- 设置构建的 jar 包名 -->
        <finalName>${project.artifactId}</finalName>
        <!-- 使用 spring-boot-maven-plugin 插件打包 -->
        <plugins>
            <!--设置 SpringBoot 打包插件不包含任何 Jar 依赖包-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.2.2.RELEASE</version>
                <configuration>
                    <includes>
                        <include>
                            <groupId>nothing</groupId>
                            <artifactId>nothing</artifactId>
                        </include>
                    </includes>
                </configuration>
            </plugin>

            <!--设置应用 Main 参数启动依赖查找的地址指向外部 lib 文件夹-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <!--设置将 lib 拷贝到应用 Jar 外面-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.1.1</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--远程push到私服，踩坑：报错：\\.\pipe\docker_engine (系统找不到指定的文件。)，本地需要安装docker插件，
            参考：https://blog.csdn.net/qq_43437874/article/details/107198498-->
            <!--<plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>${dockerfile.maven.plugin.version}</version>
                <executions>
                    <execution>
                        <id>default</id>
                        <goals>
                            <goal>build</goal>
                            <goal>push</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <username>Jaquez</username>
                    <password>Jaquez123456</password>
                    <repository>${docker.repostory}/${docker.image.prefix}/jaquez/${project.artifactId}</repository>
                    <tag>${docker.image.tag}</tag>
                    <buildArgs>
                        <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
                    </buildArgs>
                    <useMavenSettingsForAuth>false</useMavenSettingsForAuth>
                </configuration>
            </plugin>-->
            <!-- docker打包插件，推送到私服仓库，fabric8对K8S支持很友好 -->
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.33.0</version>
                <configuration>
                    <verbose>true</verbose>
                    <!-- docker远程管理url -->
                    <dockerHost>tcp://192.168.177.1:2375</dockerHost>
                    <registry>${docker.repostory}</registry>
                    <authConfig>
                        <!-- docker私服账户密码 -->
                        <push>
                            <username>Jaquez</username>
                            <password>Jaquez123456</password>
                        </push>
                    </authConfig>
                    <!--提供参数向Dockerfile传递-->
                    <buildArgs>
                        <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
                    </buildArgs>
                    <images>
                        <image>
                            <!-- 镜像名称，命名空间/仓库名称:镜像版本号 -->
                            <name>${docker.image.prefix}/${project.artifactId}:${docker.image.tag}</name>
                            <build>
                                <!--<dockerFile>${project.basedir}/src/main/docker/Dockerfile</dockerFile>-->
                                <dockerFile>${project.basedir}/Dockerfile</dockerFile>
                                <assembly>
                                    <name>/</name>
                                    <!-- artifact是预定义的值，表示将项目打包后的jar拷贝到编译上下文中，便于Dockerfile ADD指令 -->
                                    <descriptorRef>artifact</descriptorRef>
                                </assembly>
                            </build>
                            <run>
                                <!-- 运行时容器名称 -->
                                <containerNamePattern>${project.artifactId}</containerNamePattern>
                                <extraHosts>
                                    <extraHost>192.168.177.1</extraHost>
                                </extraHosts>
                            </run>
                        </image>
                    </images>
                </configuration>
            </plugin>
            <!--发布到容器中-->
            <plugin>
                <!-- https://mvnrepository.com/artifact/com.spotify/docker-maven-plugin -->
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${docker.maven.plugin.version}</version>
                <!--将插件绑定在某个phase执行-->
                <executions>
                    <!--执行-->
                    <execution>
                        <id>build-image</id>
                        <!--将插件绑定在package这个phase上。也就是说，用户只需执行mvn package，就会自动执行mvn docker:build-->
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--指定生成的镜像名，作者名+项目名，踩坑：作者名为小写，含有大写会报错-->
                    <imageName>jaquez/${project.artifactId}</imageName>
                    <!--指定标签-->
                    <imageTags>
                        <imageTag>latest</imageTag>
                    </imageTags>
                    <!-- 指定 Dockerfile 路径 ${project.basedir}：项目根路径下-->
                    <!--<dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>-->
                    <dockerDirectory>${project.basedir}</dockerDirectory>

                    <!--指定基础镜像jdk1.8-->
                    <baseImage>java</baseImage>
                    <!--镜像制作人本人信息-->
                    <maintainer>Jaquez@email.com</maintainer>

                    <!--切换到ROOT目录-->
                    <!--<workdir>/ROOT</workdir>-->

                    <!--查看我们的java版本-->
                    <!--<cmd>["java", "-version"]</cmd>-->

                    <!--${project.build.finalName}.jar是打包后生成的jar包的名字-->
                    <!--<entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>-->

                    <!--指定远程 docker api地址-->
                    <dockerHost>http://192.168.177.1:2375</dockerHost>
                    <!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <!--jar 包所在的路径 此处配置的 即对应 target 目录-->
                            <directory>${project.build.directory}</directory>
                            <!-- 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　-->
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                    <!-- 以下两行是为了docker push到DockerHub使用的。 -->
                    <!--<serverId>docker-hub</serverId>-->
                    <!--<registryUrl>https://index.docker.io/v1</registryUrl>-->
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>